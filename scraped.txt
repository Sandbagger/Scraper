{
    "title": "Datasette 0.61: The annotated release notes",
    "byline": null,
    "dir": null,
    "lang": "en-gb",
    "content": "<div id=\"readability-page-1\" class=\"page\"><div>\n\n\n\n<p>24th March 2022</p>\n\n<p>I released <a href=\"https://docs.datasette.io/en/stable/changelog.html#v0-61\">Datasette 0.61</a> this morning\u2014closely followed by <a href=\"https://docs.datasette.io/en/stable/changelog.html#v0-61-1\">0.61.1</a> to fix a minor bug. Here are the annotated release notes.</p>\n<blockquote>\n<p>In preparation for Datasette 1.0, this release includes two potentially backwards-incompatible changes. Hashed URL mode has been moved to a separate plugin, and the way Datasette generates URLs to databases and tables with special characters in their name such as <code>/</code> and <code>.</code> has changed.</p>\n<ul>\n<li>URLs within Datasette now use a different encoding scheme for tables or databases that include \u201cspecial\u201d characters outside of the range of <code>a-zA-Z0-9_-</code>. This scheme is explained here: <a href=\"https://docs.datasette.io/en/stable/internals.html#internals-tilde-encoding\">Tilde encoding</a>. (<a href=\"https://github.com/simonw/datasette/issues/1657\">#1657</a>)</li>\n<li>Removed hashed URL mode from Datasette. The new <code>datasette-hashed-urls</code> plugin can be used to achieve the same result, see <a href=\"https://docs.datasette.io/en/stable/performance.html#performance-hashed-urls\">datasette-hashed-urls</a> for details. (<a href=\"https://github.com/simonw/datasette/issues/1661\">#1661</a>)</li>\n</ul>\n</blockquote>\n<p>I talked about these changes <a href=\"https://simonwillison.net/2022/Mar/19/weeknotes/\">in my weeknotes</a>. These are two major steps forward towards Datasette 1.0, in that implementing them removed a lot of code and complexity from Datasette core.</p>\n<blockquote>\n<p>Datasette also now requires Python 3.7 or higher.</p>\n</blockquote>\n<p>0.60 was the final release to work with Python 3.6, which ended security support <a href=\"https://pythonspeed.com/articles/stop-using-python-3.6/\">last December</a>.</p>\n<blockquote>\n<ul>\n<li>Databases can now have a custom path within the Datasette instance that is independent of the database name, using the <code>db.route</code> property. (<a href=\"https://github.com/simonw/datasette/issues/1668\">#1668</a>)</li>\n</ul>\n</blockquote>\n<p>This was the last change I made before the 0.61 release, and turned out to have <a href=\"https://github.com/simonw/datasette/issues/1682\">a severe bug</a> which prompted me to release 0.61.1 shortly afterwards.</p>\n<p>I needed the feature in order to implement the <a href=\"https://docs.datasette.io/en/stable/performance.html#performance-hashed-urls\">datasette-hashed-urls</a> plugin.</p>\n<p>That plugin works by modifying the URL relating to a database in order to incorporate the SHA-256 hash of that database\u2019s contents. This allows all JSON and HTML pages within that database to set a far-future cache header, providing a huge performance boost especially if run behind a caching proxy such as Cloudflare.</p>\n<p>Initially it worked by changing the display name of the database too, but <a href=\"https://github.com/simonw/datasette-hashed-urls/issues/8\">Forest Gregg pointed out</a> that exposing all of those hashes in the UI was a pretty poor user experience.</p>\n<p>So I decided to split the \u201croute\u201d (the URL to the database\u2014\u201cpath\u201d was already in use as the path to the file on disk) from the unique name used to refer to the database internally.</p>\n<p>I caught almost all of the places in the code that needed to be updated, but shortly after shipping 0.61 I noticed that Forest had <a href=\"https://github.com/simonw/datasette-hashed-urls/issues/13\">filed issues</a> relating to the one place I had missed!</p>\n<p>Those fixes are out now, and <a href=\"https://github.com/simonw/datasette-hashed-urls/releases/tag/0.3\">datasette-hashed-urls 0.3</a> should work as advertised.</p>\n<blockquote>\n<ul>\n<li>Datasette is now covered by a <a href=\"https://github.com/simonw/datasette/blob/main/CODE_OF_CONDUCT.md\">Code of Conduct</a>. (<a href=\"https://github.com/simonw/datasette/issues/1654\">#1654</a>)</li>\n</ul>\n</blockquote>\n<p>It\u2019s good open source governance to have one of these. I decided to adopt the <a href=\"https://www.contributor-covenant.org/version/1/4/code-of-conduct/\">Contributor Covenant</a> because it reflected my own values for the project and is used by a <a href=\"https://www.contributor-covenant.org/adopters/\">large number of projects</a> that I trust.</p>\n<blockquote>\n<ul>\n<li>Python 3.6 is no longer supported. (<a href=\"https://github.com/simonw/datasette/issues/1577\">#1577</a>)</li>\n<li>Tests now run against Python 3.11-dev. (<a href=\"https://github.com/simonw/datasette/issues/1621\">#1621</a>)</li>\n</ul>\n</blockquote>\n<p>I didn\u2019t test Datasette against Python 3.10 before it came out and was <a href=\"https://simonwillison.net/2021/Oct/9/finding-and-reporting-a-bug/\">distressed to find an asyncio bug</a> that caused errors with the project after that version of Python was released!</p>\n<p>I\u2019m not going to let that happen again, so Datasette\u2019s test suite now runs against the 3.11 developer preview. Here\u2019s <a href=\"https://til.simonwillison.net/github-actions/python-3-11\">my TIL</a> about how I set that up.</p>\n<blockquote>\n<ul>\n<li>New <a href=\"https://docs.datasette.io/en/stable/internals.html#datasette-ensure-permissions\">datasette.ensure_permissions(actor, permissions)</a> internal method for checking multiple permissions at once. (<a href=\"https://github.com/simonw/datasette/issues/1675\">#1675</a>)</li>\n<li>New <a href=\"https://docs.datasette.io/en/stable/internals.html#datasette-check-visibilty\">datasette.check_visibility(actor, action, resource=None)</a> internal method for checking if a user can see a resource that would otherwise be invisible to unauthenticated users. (<a href=\"https://github.com/simonw/datasette/issues/1678\">#1678</a>)</li>\n</ul>\n</blockquote>\n<p>These two new permissions APIs came out of <a href=\"https://github.com/simonw/datasette/issues/1660\">a larger effort</a> to refactor and simplify Datasette\u2019s core views.</p>\n<p>Datasette\u2019s <a href=\"https://github.com/simonw/datasette/blob/0.60.2/datasette/views/base.py#L56-L101\">BaseView class included permission logic</a>. I\u2019m trying to shrink that superclass down to the point where I can remove it entirely, and I also wanted to make that permission logic available to plugins as well. Moving those methods into the documented <code>Datasette</code> class felt like a good way to achieve that.</p>\n<blockquote>\n<ul>\n<li>Table and row HTML pages now include a <code>&lt;link rel=\"alternate\" type=\"application/json+datasette\" href=\"...\"&gt;</code> element and return a <code>Link: URL; rel=\"alternate\"; type=\"application/json+datasette\"</code> HTTP header pointing to the JSON version of those pages. (<a href=\"https://github.com/simonw/datasette/issues/1533\">#1533</a>)</li>\n<li>\n<code>Access-Control-Expose-Headers: Link</code> is now added to the CORS headers, allowing remote JavaScript to access that header.</li>\n</ul>\n</blockquote>\n<p>The idea behind this change originated with my experimental work on the <a href=\"https://github.com/simonw/datasette-notebook\">datasette-notebook</a> plugin, which aims to implement a combination wiki-dashboard system for Datasette. Development of that plugin is stalled for the moment.</p>\n<p>I wanted to build a feature where you could paste in a URL to a Datasette query or filtered table and the plugin would then embed and display the results of that query on a page.</p>\n<p>To support this, I built an experimental Web Component, <a href=\"https://www.npmjs.com/package/datasette-table\">datasette-table</a>, and published it to npm (<a href=\"https://til.simonwillison.net/npm/publish-web-component\">TIL</a>).</p>\n<p>The problem I needed to solve was this: given a URL, how can I tell that it corresponds to a Datasette table or query? Especially if that URL might be hosted on a separate website entirely (why not support embedding Datasette tables from other instances?)</p>\n<p>My solution was an HTTP header. You can now make a <code>HEAD</code> request against a Datasette page and, if it corresponds to a table or view, you\u2019ll get back a <code>Link: ... rel=\"alternate\"</code> header pointing to the JSON version of that page.</p>\n<p>Here\u2019s an example using <code>curl</code>:</p>\n<pre><code>~ % curl -I https://latest.datasette.io/fixtures/facetable\nHTTP/2 200 \nlink: https://latest.datasette.io/fixtures/facetable.json; rel=\"alternate\"; type=\"application/json+datasette\"\ncache-control: max-age=5\nreferrer-policy: no-referrer\naccess-control-allow-origin: *\naccess-control-allow-headers: Authorization\naccess-control-expose-headers: Link\ncontent-type: text/html; charset=utf-8\n</code></pre>\n<p>I\u2019m looking forward to building interesting features against this in the future.</p>\n<blockquote>\n<ul>\n<li>Canned queries are now shown at the top of the database page, directly below the SQL editor. Previously they were shown at the bottom, below the list of tables. (<a href=\"https://github.com/simonw/datasette/issues/1612\">#1612</a>)</li>\n</ul>\n</blockquote>\n<p>Jacob Fenton <a href=\"https://github.com/simonw/datasette/issues/1612\">suggested this</a>. Canned queries were previously listed at the very bottom of <a href=\"https://latest.datasette.io/fixtures\">the database page</a>, below the list of tables. They\u2019re now shown at the top. I think this is a big improvement!</p>\n<blockquote>\n<ul>\n<li>Datasette now has a default favicon. (<a href=\"https://github.com/simonw/datasette/issues/1603\">#1603</a>)</li>\n</ul>\n</blockquote>\n<p>I originally created this in Figma, and then <a href=\"https://til.simonwillison.net/pixelmator/pixel-editing-favicon\">hand-edited it in Pixelmator</a>.</p>\n<blockquote>\n<ul>\n<li>\n<code>sqlite_stat</code> tables are now hidden by default. (<a href=\"https://github.com/simonw/datasette/issues/1587\">#1587</a>)</li>\n<li>SpatiaLite tables <code>data_licenses</code>, <code>KNN</code> and <code>KNN2</code> are now hidden by default. (<a href=\"https://github.com/simonw/datasette/issues/1601\">#1601</a>)</li>\n</ul>\n</blockquote>\n<p>SQLite and SpatiaLite occasionally use automatically created tables to power some of their functionality. These aren\u2019t very interesting to regular users, so Datasette omits them from view by default on the homepage.</p>\n<p>I have an open issue for <a href=\"https://github.com/simonw/datasette/issues/1403\">Labels explaining what hidden tables are for</a> since the current UI leads to legitimate questions from users who click on the \u201cshow hidden tables\u201d link!</p>\n<blockquote>\n<ul>\n<li>SQL query tracing mechanism now works for queries executed in <code>asyncio</code> sub-tasks, such as those created by <code>asyncio.gather()</code>. (<a href=\"https://github.com/simonw/datasette/issues/1576\">#1576</a>)</li>\n<li>\n<a href=\"https://docs.datasette.io/en/stable/internals.html#internals-tracer\">datasette.tracer</a> mechanism is now documented.</li>\n</ul>\n</blockquote>\n<p>This was the impetus for dropping support for Python 3.6.</p>\n<p>The tracer mechanism powers the debugging feature that shows all of the SQL queries that were executed to produce a page (<a href=\"https://latest-with-plugins.datasette.io/?_trace=1\">demo here</a>).</p>\n<p>I\u2019ve been experimenting with ways to run some of these queries in parallel, taking advantage of <code>asyncio</code>. But the tracer mechanism wasn\u2019t correctly tracking these, because queries executed in additional <code>asyncio</code> tasks were not being correctly bundled together.</p>\n<p>The Python standard library <a href=\"https://docs.python.org/3/library/contextvars.html\">contextvars</a> module provides a neat way to solve this, but it was introduced in Python 3.7. So I finally bit the bullet and dropped 3.6.</p>\n<blockquote>\n<ul>\n<li>Common Datasette symbols can now be imported directly from the top-level <code>datasette</code> package, see <a href=\"https://docs.datasette.io/en/stable/internals.html#internals-shortcuts\">Import shortcuts</a>. Those symbols are <code>Response</code>, <code>Forbidden</code>, <code>NotFound</code>, <code>hookimpl</code>, <code>actor_matches_allow</code>. (<a href=\"https://github.com/simonw/datasette/issues/957\">#957</a>)</li>\n</ul>\n</blockquote>\n<p>This means plugins can now do <code>from datasette import Response</code>, where previously they had to use <code>from datasette.utils.asgi import Response</code>.</p>\n<p>I\u2019ve long been frustrated that Django makes me remember where to import things from\u2014so now Datasette lets the most commonly imported stuff (counted by running grep against my own plugins) from the root of the package.</p>\n<blockquote>\n<ul>\n<li>\n<code>/-/versions</code> page now returns additional details for libraries used by SpatiaLite. (<a href=\"https://github.com/simonw/datasette/issues/1607\">#1607</a>)</li>\n</ul>\n</blockquote>\n<p>You can see <a href=\"https://calands.datasettes.com/-/versions\">a demo of that here</a>.</p>\n<blockquote>\n<ul>\n<li>Documentation now links to the <a href=\"https://datasette.io/tutorials\">Datasette Tutorials</a>.</li>\n</ul>\n</blockquote>\n<p>I wrote about these new tutorials <a href=\"https://simonwillison.net/2022/Feb/27/datasette-tutorials/\">a few weeks ago</a>.</p>\n<p>And the rest:</p>\n<blockquote>\n<ul>\n<li>Datasette will now also look for SpatiaLite in <code>/opt/homebrew</code>\u2014thanks, Dan Peterson. (<a href=\"https://github.com/simonw/datasette/pull/1649\">#1649</a>)</li>\n<li>Fixed bug where <a href=\"https://docs.datasette.io/en/stable/custom_templates.html#custom-pages\">custom pages</a> did not work on Windows. Thanks, Robert Christie. (<a href=\"https://github.com/simonw/datasette/issues/1545\">#1545</a>)</li>\n<li>Fixed error caused when a table had a column named <code>n</code>. (<a href=\"https://github.com/simonw/datasette/issues/1228\">#1228</a>)</li>\n</ul>\n</blockquote>\n\n\n\n\n</div></div>",
    "textContent": "\n\n\n\n24th March 2022\n\nI released Datasette 0.61 this morning\u2014closely followed by 0.61.1 to fix a minor bug. Here are the annotated release notes.\n\nIn preparation for Datasette 1.0, this release includes two potentially backwards-incompatible changes. Hashed URL mode has been moved to a separate plugin, and the way Datasette generates URLs to databases and tables with special characters in their name such as / and . has changed.\n\nURLs within Datasette now use a different encoding scheme for tables or databases that include \u201cspecial\u201d characters outside of the range of a-zA-Z0-9_-. This scheme is explained here: Tilde encoding. (#1657)\nRemoved hashed URL mode from Datasette. The new datasette-hashed-urls plugin can be used to achieve the same result, see datasette-hashed-urls for details. (#1661)\n\n\nI talked about these changes in my weeknotes. These are two major steps forward towards Datasette 1.0, in that implementing them removed a lot of code and complexity from Datasette core.\n\nDatasette also now requires Python 3.7 or higher.\n\n0.60 was the final release to work with Python 3.6, which ended security support last December.\n\n\nDatabases can now have a custom path within the Datasette instance that is independent of the database name, using the db.route property. (#1668)\n\n\nThis was the last change I made before the 0.61 release, and turned out to have a severe bug which prompted me to release 0.61.1 shortly afterwards.\nI needed the feature in order to implement the datasette-hashed-urls plugin.\nThat plugin works by modifying the URL relating to a database in order to incorporate the SHA-256 hash of that database\u2019s contents. This allows all JSON and HTML pages within that database to set a far-future cache header, providing a huge performance boost especially if run behind a caching proxy such as Cloudflare.\nInitially it worked by changing the display name of the database too, but Forest Gregg pointed out that exposing all of those hashes in the UI was a pretty poor user experience.\nSo I decided to split the \u201croute\u201d (the URL to the database\u2014\u201cpath\u201d was already in use as the path to the file on disk) from the unique name used to refer to the database internally.\nI caught almost all of the places in the code that needed to be updated, but shortly after shipping 0.61 I noticed that Forest had filed issues relating to the one place I had missed!\nThose fixes are out now, and datasette-hashed-urls 0.3 should work as advertised.\n\n\nDatasette is now covered by a Code of Conduct. (#1654)\n\n\nIt\u2019s good open source governance to have one of these. I decided to adopt the Contributor Covenant because it reflected my own values for the project and is used by a large number of projects that I trust.\n\n\nPython 3.6 is no longer supported. (#1577)\nTests now run against Python 3.11-dev. (#1621)\n\n\nI didn\u2019t test Datasette against Python 3.10 before it came out and was distressed to find an asyncio bug that caused errors with the project after that version of Python was released!\nI\u2019m not going to let that happen again, so Datasette\u2019s test suite now runs against the 3.11 developer preview. Here\u2019s my TIL about how I set that up.\n\n\nNew datasette.ensure_permissions(actor, permissions) internal method for checking multiple permissions at once. (#1675)\nNew datasette.check_visibility(actor, action, resource=None) internal method for checking if a user can see a resource that would otherwise be invisible to unauthenticated users. (#1678)\n\n\nThese two new permissions APIs came out of a larger effort to refactor and simplify Datasette\u2019s core views.\nDatasette\u2019s BaseView class included permission logic. I\u2019m trying to shrink that superclass down to the point where I can remove it entirely, and I also wanted to make that permission logic available to plugins as well. Moving those methods into the documented Datasette class felt like a good way to achieve that.\n\n\nTable and row HTML pages now include a <link rel=\"alternate\" type=\"application/json+datasette\" href=\"...\"> element and return a Link: URL; rel=\"alternate\"; type=\"application/json+datasette\" HTTP header pointing to the JSON version of those pages. (#1533)\n\nAccess-Control-Expose-Headers: Link is now added to the CORS headers, allowing remote JavaScript to access that header.\n\n\nThe idea behind this change originated with my experimental work on the datasette-notebook plugin, which aims to implement a combination wiki-dashboard system for Datasette. Development of that plugin is stalled for the moment.\nI wanted to build a feature where you could paste in a URL to a Datasette query or filtered table and the plugin would then embed and display the results of that query on a page.\nTo support this, I built an experimental Web Component, datasette-table, and published it to npm (TIL).\nThe problem I needed to solve was this: given a URL, how can I tell that it corresponds to a Datasette table or query? Especially if that URL might be hosted on a separate website entirely (why not support embedding Datasette tables from other instances?)\nMy solution was an HTTP header. You can now make a HEAD request against a Datasette page and, if it corresponds to a table or view, you\u2019ll get back a Link: ... rel=\"alternate\" header pointing to the JSON version of that page.\nHere\u2019s an example using curl:\n~ % curl -I https://latest.datasette.io/fixtures/facetable\nHTTP/2 200 \nlink: https://latest.datasette.io/fixtures/facetable.json; rel=\"alternate\"; type=\"application/json+datasette\"\ncache-control: max-age=5\nreferrer-policy: no-referrer\naccess-control-allow-origin: *\naccess-control-allow-headers: Authorization\naccess-control-expose-headers: Link\ncontent-type: text/html; charset=utf-8\n\nI\u2019m looking forward to building interesting features against this in the future.\n\n\nCanned queries are now shown at the top of the database page, directly below the SQL editor. Previously they were shown at the bottom, below the list of tables. (#1612)\n\n\nJacob Fenton suggested this. Canned queries were previously listed at the very bottom of the database page, below the list of tables. They\u2019re now shown at the top. I think this is a big improvement!\n\n\nDatasette now has a default favicon. (#1603)\n\n\nI originally created this in Figma, and then hand-edited it in Pixelmator.\n\n\n\nsqlite_stat tables are now hidden by default. (#1587)\nSpatiaLite tables data_licenses, KNN and KNN2 are now hidden by default. (#1601)\n\n\nSQLite and SpatiaLite occasionally use automatically created tables to power some of their functionality. These aren\u2019t very interesting to regular users, so Datasette omits them from view by default on the homepage.\nI have an open issue for Labels explaining what hidden tables are for since the current UI leads to legitimate questions from users who click on the \u201cshow hidden tables\u201d link!\n\n\nSQL query tracing mechanism now works for queries executed in asyncio sub-tasks, such as those created by asyncio.gather(). (#1576)\n\ndatasette.tracer mechanism is now documented.\n\n\nThis was the impetus for dropping support for Python 3.6.\nThe tracer mechanism powers the debugging feature that shows all of the SQL queries that were executed to produce a page (demo here).\nI\u2019ve been experimenting with ways to run some of these queries in parallel, taking advantage of asyncio. But the tracer mechanism wasn\u2019t correctly tracking these, because queries executed in additional asyncio tasks were not being correctly bundled together.\nThe Python standard library contextvars module provides a neat way to solve this, but it was introduced in Python 3.7. So I finally bit the bullet and dropped 3.6.\n\n\nCommon Datasette symbols can now be imported directly from the top-level datasette package, see Import shortcuts. Those symbols are Response, Forbidden, NotFound, hookimpl, actor_matches_allow. (#957)\n\n\nThis means plugins can now do from datasette import Response, where previously they had to use from datasette.utils.asgi import Response.\nI\u2019ve long been frustrated that Django makes me remember where to import things from\u2014so now Datasette lets the most commonly imported stuff (counted by running grep against my own plugins) from the root of the package.\n\n\n\n/-/versions page now returns additional details for libraries used by SpatiaLite. (#1607)\n\n\nYou can see a demo of that here.\n\n\nDocumentation now links to the Datasette Tutorials.\n\n\nI wrote about these new tutorials a few weeks ago.\nAnd the rest:\n\n\nDatasette will now also look for SpatiaLite in /opt/homebrew\u2014thanks, Dan Peterson. (#1649)\nFixed bug where custom pages did not work on Windows. Thanks, Robert Christie. (#1545)\nFixed error caused when a table had a column named n. (#1228)\n\n\n\n\n\n\n",
    "length": 8641,
    "excerpt": "I released Datasette 0.61 this morning\u2014closely followed by 0.61.1 to fix a minor bug. Here are the annotated release notes. In preparation for Datasette 1.0, this release includes two potentially \u2026",
    "siteName": null
}
